FROM alpine:3.9

# Internals, you probably don't need to change these
ENV APP_DIR=/srv/app
ENV SRC_DIR=/srv/app/src
ENV CKAN_INI=${APP_DIR}/ckan.ini
ENV PIP_SRC=${SRC_DIR}
ENV CKAN_STORAGE_PATH=/var/lib/ckan
# CKAN version to build
ENV GIT_BRANCH=ckan-2.9.5
# Customize these on the .env file if needed
ENV CKAN_SITE_URL=http://ckan-dev:5000
ENV CKAN__PLUGINS envvars

# UWSGI options
ENV UWSGI_HARAKIRI=50

WORKDIR ${APP_DIR}

# Install necessary packages to run CKAN
RUN apk add tzdata \
        git \
        gettext \
        postgresql-client \
        python3 \
        libxml2 \
        libxslt \
        musl-dev \
        libmagic \
        curl \
        patch \
        sudo

# Packages to build CKAN requirements and plugins
RUN apk add --virtual .build-deps \
        postgresql-dev \
        gcc \
        make \
        g++ \
        autoconf \
        automake \
    	libtool \
        python3-dev \
        libxml2-dev \
        libxslt-dev \
        linux-headers \
        openssl-dev \
        libffi-dev \
        cargo \
        xmlsec \
        rust

ENV TZ America/New_York

# Create SRC_DIR
RUN mkdir -p ${SRC_DIR} && \
    # Install pip, supervisord and uwsgi
    curl -o ${SRC_DIR}/get-pip.py https://bootstrap.pypa.io/pip/3.6/get-pip.py && \
    python3 ${SRC_DIR}/get-pip.py && \
    pip3 install supervisor && \
    mkdir /etc/supervisord.d && \
    #pip wheel --wheel-dir=/wheels uwsgi gevent && \
    rm -rf ${SRC_DIR}/get-pip.py

COPY requirement-setuptools.txt ${APP_DIR}
COPY requirements-dev.txt ${APP_DIR}
COPY requirements-noh.txt ${APP_DIR}
COPY common/supervisord.conf /etc
COPY public.crt ${APP_DIR}/public.crt
COPY private.pem ${APP_DIR}/private.pem

### Install requirements
RUN pip install -r ${APP_DIR}/requirement-setuptools.txt
RUN pip install -r ${APP_DIR}/requirements-dev.txt
RUN pip install -r ${APP_DIR}/requirements-noh.txt

RUN echo "over" >> ${SRC_DIR}/ckan/ckanext/datastore/allowed_functions.txt

ENV CKAN__PLUGINS image_view text_view recline_view datastore harvest ckan_harvester googleanalytics resource_proxy pages showcase xloader envvars

RUN cd ${SRC_DIR}/ckan && \
    cp who.ini ${APP_DIR}
# Create and update CKAN config
RUN ckan generate config ${CKAN_INI} && \
    ckan config-tool ${CKAN_INI} "ckan.plugins = ${CKAN__PLUGINS}" && \
    ckan config-tool ${CKAN_INI} "ckan.site_url = ${CKAN__SITE_URL}" && \
    ckan config-tool ${CKAN_INI} "ckanext.saml2auth.idp_metadata.remote_url = https://idp.int.identitysandbox.gov/api/saml/metadata2023" && \
    ckan config-tool ${CKAN_INI} "ckanext.saml2auth.user_firstname = first_name" && \
    ckan config-tool ${CKAN_INI} "ckanext.saml2auth.user_lastname = last_name" && \
    ckan config-tool ${CKAN_INI} "ckanext.saml2auth.user_email = email" && \
    ckan config-tool ${CKAN_INI} "ckanext.saml2auth.key_file_path = /srv/app/private.pem" && \
    ckan config-tool ${CKAN_INI} "ckanext.saml2auth.cert_file_path = /srv/app/public.crt" && \
    ckan config-tool ${CKAN_INI} "ckanext.saml2auth.allow_unknown_attributes = true" && \
    ckan config-tool ${CKAN_INI} "ckanext.saml2auth.sp.name_id_format = urn:oasis:names:tc:saml:2.0:nameid-format:persistent urn:oasis:names:tc:saml:2.0:nameid-format:transient urn:oasis:names:tc:saml:2.0:nameid-format:emailaddress" && \
    ckan config-tool ${CKAN_INI} "ckanext.saml2auth.entity_id = urn:gov:gsa:SAML:2.0.profiles:sp:sso:department_of_education:open_data_platform" && \
    ckan config-tool ${CKAN_INI} "ckanext.saml2auth.want_response_signed = false" && \
    ckan config-tool ${CKAN_INI} "ckanext.saml2auth.want_assertions_signed = false" && \
    ckan config-tool ${CKAN_INI} "ckanext.saml2auth.want_assertions_or_response_signed = true" && \
    ckan config-tool ${CKAN_INI} "ckanext.saml2auth.enable_ckan_internal_login = true" && \
    ckan config-tool ${CKAN_INI} "ckanext.saml2auth.requested_authn_context = http://idmanagement.gov/ns/assurance/ial/1 http://idmanagement.gov/ns/requested_attributes?ReqAttr=email,first_name,last_name"

# Create a local user and group to run the app
RUN addgroup -g 92 -S ckan && \
    adduser -u 92 -h /srv/app -H -D -S -G ckan ckan

# Create local storage folder
RUN mkdir -p $CKAN_STORAGE_PATH && \
    chown -R ckan:ckan $CKAN_STORAGE_PATH

## Patches
COPY 2.9/setup/patches ${APP_DIR}/patches
RUN for d in $APP_DIR/patches/*; do \
        for f in `ls $d/*.patch | sort -g`; do \
			cd $SRC_DIR/`basename "$d"` && echo "$0: Applying patch $f to $SRC_DIR/`basename $d`"; patch -p1 < "$f" ; \
        done ; \
    done

COPY 2.9/setup/prerun.py ${APP_DIR}
COPY 2.9/setup/supervisor.worker.conf /etc/supervisord.d/worker.conf
COPY 2.9/setup/start_ckan_development.sh ${APP_DIR}

ADD 2.9/wsgi.py ${APP_DIR}

# Create entrypoint directory for children image scripts
# ONBUILD RUN mkdir /docker-entrypoint.d
COPY docker-entrypoint.d/* /docker-entrypoint.d/

RUN chown ckan -R ${APP_DIR}

ENV SRC_EXTENSIONS_DIR=${APP_DIR}/src_extensions
RUN mkdir $SRC_EXTENSIONS_DIR

COPY 2.9/setup/start_ckan_development.sh ${APP_DIR}
RUN chmod +x ${APP_DIR}/start_ckan_development.sh
CMD ["/srv/app/start_ckan_development.sh"]

USER root
